@model Hackathon.UI.Models.QuestionReturnModel

@{
    Layout = null;
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

<style>
    html,
    body {
        font-family: "Press Start 2P", cursive;
        height: 100%;
        width: 100%;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .sky,
    .ground {
        position: relative;
    }

    .sky {
        height: 100%;
        background-color: #548cff !important;
    }

    .ground {
        height: 10%;
        background-color: #c84c0c;
        background-image: url("https://raw.githubusercontent.com/LantareCode/random-this-and-thats/master/CSS/SuperMario-Animation/images/groundblock.png");
    }

    .scorebar {
        position: absolute;
        height: 120px;
        width: 100%;
        font-family: "Press Start 2P", cursive;
        font-size: 180%;
        color: white;
        padding-left: 50px;
        padding-right: 50px;
        line-height: 0.2;
    }

    .cloud {
        position: absolute;
        height: 100px;
    }

        .cloud:nth-child(2) {
            top: 120px;
            -webkit-animation: wind 80s both infinite linear reverse;
            animation: wind 80s both infinite linear reverse;
        }

        .cloud:nth-child(3) {
            top: 280px;
            -webkit-animation: wind 50s both infinite linear reverse;
            animation: wind 50s both infinite linear reverse;
        }

        .cloud:nth-child(4) {
            top: 450px;
            -webkit-animation: wind 30s both infinite linear reverse;
            animation: wind 30s both infinite linear reverse;
        }

    .skyblocks {
        position: absolute;
        top: -250px;
    }

    .brick {
        position: fixed;
        margin: -2px;
    }

        .brick:nth-child(1) {
            left: 600px;
        }

        .brick:nth-child(2) {
            left: 670px;
        }

        .brick:nth-child(3) {
            left: 740px;
        }

        .brick:nth-child(4) {
            left: 810px;
        }

    .mario {
        position: absolute;
        width: 71px;
        height: 72px;
        background: url("https://raw.githubusercontent.com/LantareCode/random-this-and-thats/master/CSS/SuperMario-Animation/images/mariowalking/result.png") left center;
        top: -70px;
        left: 0px;
        -webkit-animation: play 0.8s steps(4) infinite, run 7s both infinite linear;
        animation: play 0.8s steps(4) infinite, run 7s both infinite linear;
    }
</style>


<div class="sky">
    <div class="row">
        <div class="col-3">
            <center><span style="color: #ffffff;font-size:20px;">GAMER1</span></center>
        </div>
        <div class="col-6">
            <center><h3 id="soru"></h3></center>
        </div>
        <div class="col-3">
            <center><span style="color: #ffffff;font-size:20px;">GAMER2</span></center>
        </div>
    </div>
    <div class="row" style="margin-top:40px;">
        <div class="col-3">
            <center>
                <img src="https://raw.githubusercontent.com/LantareCode/random-this-and-thats/master/CSS/SuperMario-Animation/images/Coin.gif" height="40"> <span class="bottomline-score" id="gamer1Point" style="color: #ffffff;font-size:20px;">0</span>
            </center>
        </div>
        <div class="col-6">
        </div>
        <div class="col-3">
            <center>
                <span class="bottomline-time" id="gamer2Point" style="color: #ffffff;font-size:20px;">0</span><img src="https://raw.githubusercontent.com/LantareCode/random-this-and-thats/master/CSS/SuperMario-Animation/images/Coin.gif" height="40">
            </center>
        </div>
        <div class="scorebar">
        
            <p style="
               padding-top: 20px;">


               
            </p>
        </div>
    </div>


    <body>

        <div>
            <div class="row">
               



               
               @* <span class="topline-world" style="font-size:20px;">@Model.GameKey</span>*@
              
                
            </div>
        </div>

        <center>
            <p>
                @Html.HiddenFor(ok => ok.GameKey)
                @Html.HiddenFor(ok => ok.Gamer1Key)
                @Html.HiddenFor(ok => ok.Gamer1Question)
            </p>

          

            <canvas class="card-box" width="700" height="400" id="game" style="background-color:black; margin-top: 300px;"></canvas>
            

            <p>
                <button class="btn btn-lg btn-primary btn-block" type="button" style="width:120px;" onclick="getQuestion();">Başla</button>
                <a class="btn btn-lg btn-primary btn-block" href="/Home/Index" style="width:120px;">Yeni</a>
            </p>
            <div class="row">
                <div class="col-3">
                    <label id="question1"></label>
                    <button class="btn btn-lg btn-primary btn-block" type="button" style="width:120px;" onclick="setQuestion('A');">A</button>
                </div>
                <div class="col-3">
                    <label id="question2"></label>
                    <button class="btn btn-lg btn-primary btn-block" type="button" style="width:120px;" onclick="setQuestion('B');">B</button>
                </div>
                <div class="col-3">
                    <label id="question3"></label>
                    <button class="btn btn-lg btn-primary btn-block" type="button" style="width:120px;" onclick="setQuestion('C');">C</button>
                </div>
                <div class="col-3">
                    <label id="question4"></label>
                    <button class="btn btn-lg btn-primary btn-block" type="button" style="width:120px;" onclick="setQuestion('D');">D</button>
                </div>
            </div>
        </center>

        <script>
            var canvas = document.getElementById('game');
            var context = canvas.getContext('2d');
            var grid = 16;
            var snake = {
                x: 160,
                y: 160,
                dx: grid,
                dy: 0,
                cells: [],
                maxCells: 4
            };
            var count = 0;
            var apple = {
                x: 320,
                y: 320
            };
            function getRandomInt(min, max) {
                return Math.floor(Math.random() * (max - min)) + min;
            }
            // game loop
            function loop() {
                requestAnimationFrame(loop);
                // slow game loop to 15 fps instead of 60 - 60/15 = 4
                if (++count < 4) {
                    return;
                }
                count = 0;
                context.clearRect(0, 0, canvas.width, canvas.height);
                snake.x += snake.dx;
                snake.y += snake.dy;
                // wrap snake position on edge of screen
                if (snake.x < 0) {
                    snake.x = canvas.width - grid;
                }
                else if (snake.x >= canvas.width) {
                    snake.x = 0;
                }
                if (snake.y < 0) {
                    snake.y = canvas.height - grid;
                }
                else if (snake.y >= canvas.height) {
                    snake.y = 0;
                }
                // keep track of where snake has been. front of the array is always the head
                snake.cells.unshift({ x: snake.x, y: snake.y });
                // remove cells as we move away from them
                if (snake.cells.length > snake.maxCells) {
                    snake.cells.pop();
                }
                // draw apple
                context.fillStyle = 'red';
                context.fillRect(apple.x, apple.y, grid - 1, grid - 1);
                // draw snake
                context.fillStyle = 'green';
                snake.cells.forEach(function (cell, index) {
                    context.fillRect(cell.x, cell.y, grid - 1, grid - 1);
                    // snake ate apple
                    if (cell.x === apple.x && cell.y === apple.y) {
                        alert("deneme");
                        snake.maxCells++;
                        apple.x = getRandomInt(0, 25) * grid;
                        apple.y = getRandomInt(0, 25) * grid;
                    }
                    // check collision with all cells after this one (modified bubble sort)
                    for (var i = index + 1; i < snake.cells.length; i++) {

                        // collision. reset game
                        if (cell.x === snake.cells[i].x && cell.y === snake.cells[i].y) {
                            snake.x = 160;
                            snake.y = 160;
                            snake.cells = [];
                            snake.maxCells = 4;
                            snake.dx = grid;
                            snake.dy = 0;
                            apple.x = getRandomInt(0, 25) * grid;
                            apple.y = getRandomInt(0, 25) * grid;
                        }
                    }
                });
            }
            document.addEventListener('keydown', function (e) {
                // prevent snake from backtracking on itself
                if (e.which === 37 && snake.dx === 0) {
                    snake.dx = -grid;
                    snake.dy = 0;
                }
                else if (e.which === 38 && snake.dy === 0) {
                    snake.dy = -grid;
                    snake.dx = 0;
                }
                else if (e.which === 39 && snake.dx === 0) {
                    snake.dx = grid;
                    snake.dy = 0;
                }
                else if (e.which === 40 && snake.dy === 0) {
                    snake.dy = grid;
                    snake.dx = 0;
                }
            });
            requestAnimationFrame(loop);
        </script>
    </body>

</div>


<script>
    function getQuestion() {

        let gameID = document.getElementById("GameKey").value;
        let gamerID = document.getElementById("Gamer1Key").value;

        $.ajax({
            type: 'POST',
            url: '/Questions/GetQuestions',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ gameID, gamerID }),
            success: function (result) {

                document.getElementById('soru').innerHTML = result.questionTR;
                document.getElementById('question1').innerHTML = result.choiseA;
                document.getElementById('question2').innerHTML = result.choiseB;
                document.getElementById('question3').innerHTML = result.choiseC;
                document.getElementById('question4').innerHTML = result.choiseD;

                if (result.gamer1Point != undefined) {
                    document.getElementById('gamer1Point').innerHTML = result.gamer1Point;
                }
                if (result.gamer1Point != undefined) {
                    document.getElementById('gamer2Point').innerHTML = result.gamer2Point;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Sıralama işlemi yapılamadı!");
            }
        });
    }

    function setQuestion(answer) {

        let gameID = document.getElementById("GameKey").value;
        let gamerID = document.getElementById("Gamer1Key").value;
        let questionNumber = document.getElementById("Gamer1Question").value;

        $.ajax({
            type: 'POST',
            url: '/Questions/SetAnswer',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ gameID, gamerID, questionNumber, answer }),
            success: function (result) {

                document.getElementById('soru').innerHTML = result.questionTR;
                document.getElementById('question1').innerHTML = result.choiseA;
                document.getElementById('question2').innerHTML = result.choiseB;
                document.getElementById('question3').innerHTML = result.choiseC;
                document.getElementById('question4').innerHTML = result.choiseD;
                document.getElementById('Gamer1Question').value = result.gamer1Question;

                if (result.gamer1Point != undefined) {
                    document.getElementById('gamer1Point').innerHTML = result.gamer1Point;
                }
                if (result.gamer1Point != undefined) {
                    document.getElementById('gamer2Point').innerHTML = result.gamer2Point;
                }

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Sıralama işlemi yapılamadı!");
            }
        });
    }
</script>